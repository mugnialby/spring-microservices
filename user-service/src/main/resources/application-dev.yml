# APPLICATION CONFIG
server:
  port: 7002
  error:
    include-message: "always"

spring:
  datasource:
    hikari:
      connectionTimeout: 20000
      minimum-idle: 5
      maximumPoolSize: 10
    url: "jdbc:postgresql://localhost:5433/users"
    username: "postgres"
    password: "root"
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

rabbitmq:
  queue:
    authenticate:
      request: "authenticate.request.queue"
      response: "authenticate.response.queue"
  exchange:
    authenticate: "authenticate.exchange"

# KAFKA CONFIGS
# CONSUMER
#spring.kafka.consumer.bootstrap-servers = localhost:9092
#spring.kafka.consumer.group-id = usergroup
#spring.kafka.consumer.auto-offset-reset = earliest
#spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer = org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*

# PRODUCER
#spring.kafka.producer.bootstrap-servers = localhost:9092
#spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer = org.springframework.kafka.support.serializer.JsonSerializer

# KAFKA
#kafka.topic.user.events = user.events
#kafka.topic.user.events.partition = 1